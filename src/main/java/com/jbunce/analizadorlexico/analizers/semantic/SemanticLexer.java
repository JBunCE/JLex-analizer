// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/com/jbunce/analizadorlexico/analizers/semantic/SemanticLexer.flex

package com.jbunce.analizadorlexico.analizers.semantic;
import com.jbunce.analizadorlexico.analizers.semantic.SemanticToken;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



@SuppressWarnings("fallthrough")
public class SemanticLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\5\0\1\5\1\6\4\0\1\7\1\10\12\11"+
    "\1\0\1\12\1\13\1\14\1\15\2\0\32\16\6\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\16\1\30\1\16\1\31\1\32\2\16\1\33"+
    "\1\34\1\35\1\16\1\36\4\16\1\37\1\0\1\40"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\7\1\1\2\24\0\1\3\37\0"+
    "\1\4\25\0\1\5\1\0\1\5\106\0\1\6\7\0"+
    "\1\7\27\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\41"+
    "\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6"+
    "\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee"+
    "\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6"+
    "\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\41"+
    "\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5"+
    "\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed"+
    "\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0a92\0\u0ab3\0\41"+
    "\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb"+
    "\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3"+
    "\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb"+
    "\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3"+
    "\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb"+
    "\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3"+
    "\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb"+
    "\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3"+
    "\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9\0\41\0\u13da"+
    "\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f\0\u14a0\0\41\0\u14c1"+
    "\0\u14e2\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9"+
    "\0\u15ea\0\u160b\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1"+
    "\0\u16f2\0\u1713\0\u1734\0\u1755\0\u1776\0\u1797\0\u058b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\4\2\1\4\5\2\2\5\1\6"+
    "\1\7\2\5\1\10\2\5\1\11\6\5\1\12\2\2"+
    "\42\0\2\3\46\0\1\13\35\0\1\14\3\0\1\15"+
    "\4\0\21\16\7\0\1\14\3\0\1\15\4\0\14\16"+
    "\1\17\4\16\7\0\1\14\3\0\1\15\4\0\10\16"+
    "\1\20\10\16\7\0\1\14\3\0\1\15\4\0\12\16"+
    "\1\21\1\16\1\22\4\16\7\0\1\14\3\0\1\15"+
    "\4\0\6\16\1\23\4\16\1\24\5\16\7\0\1\14"+
    "\3\0\1\15\4\0\14\16\1\25\4\16\2\0\2\13"+
    "\2\0\35\13\6\0\1\26\37\0\1\14\3\0\1\15"+
    "\4\0\21\27\7\0\1\14\10\0\21\16\7\0\1\14"+
    "\10\0\14\16\1\30\4\16\7\0\1\14\10\0\1\16"+
    "\1\31\17\16\7\0\1\14\10\0\14\16\1\32\4\16"+
    "\7\0\1\14\10\0\15\16\1\33\3\16\3\0\2\34"+
    "\2\0\1\35\10\0\21\16\7\0\1\14\10\0\17\16"+
    "\1\36\1\16\7\0\1\14\10\0\11\16\1\37\7\16"+
    "\14\0\1\40\37\0\1\15\34\0\1\14\10\0\12\16"+
    "\1\41\6\16\7\0\1\14\10\0\15\16\1\36\3\16"+
    "\7\0\1\14\10\0\1\16\1\24\17\16\3\0\2\42"+
    "\2\0\1\43\10\0\21\16\3\0\2\34\2\0\1\44"+
    "\34\0\2\44\3\0\1\26\2\0\1\45\4\0\21\45"+
    "\3\0\2\46\2\0\1\14\5\0\1\47\1\0\1\50"+
    "\21\16\7\0\1\14\10\0\4\16\1\36\14\16\7\0"+
    "\1\14\10\0\5\16\1\51\13\16\3\0\2\42\2\0"+
    "\1\52\34\0\2\52\3\0\1\26\2\0\1\53\4\0"+
    "\21\54\3\0\2\44\6\0\1\45\4\0\21\45\2\0"+
    "\11\55\1\56\2\55\1\57\1\55\21\56\2\55\1\0"+
    "\2\46\10\0\1\47\1\0\1\50\24\0\2\47\13\0"+
    "\21\60\3\0\2\50\13\0\21\61\7\0\1\14\10\0"+
    "\1\16\1\62\17\16\3\0\2\52\6\0\1\53\4\0"+
    "\21\54\2\0\1\63\1\64\1\65\1\0\5\63\1\53"+
    "\23\63\1\66\3\63\1\0\2\65\6\0\1\67\4\0"+
    "\17\70\1\71\1\70\2\0\11\55\1\56\4\55\21\56"+
    "\3\55\2\56\3\55\1\72\2\55\1\56\4\55\21\56"+
    "\43\55\5\0\1\73\3\0\1\74\4\0\21\75\3\0"+
    "\2\76\6\0\1\77\1\100\1\0\1\101\1\0\21\102"+
    "\7\0\1\14\10\0\13\16\1\36\5\16\13\0\1\64"+
    "\30\0\2\65\6\0\1\64\23\0\1\103\4\0\2\65"+
    "\32\0\1\103\14\0\1\64\20\0\1\104\7\0\2\65"+
    "\6\0\1\67\4\0\17\105\1\106\1\105\3\0\2\65"+
    "\13\0\17\70\1\71\1\70\3\0\2\65\13\0\14\70"+
    "\1\107\2\70\1\71\1\70\2\0\1\55\2\72\6\55"+
    "\1\56\3\55\1\110\21\56\2\55\6\0\1\111\37\0"+
    "\1\73\3\0\1\74\4\0\21\112\7\0\1\73\10\0"+
    "\21\75\3\0\2\76\11\0\1\101\25\0\2\76\6\0"+
    "\1\77\1\100\1\0\1\101\1\0\21\113\3\0\2\101"+
    "\6\0\1\114\4\0\21\115\3\0\2\76\7\0\1\100"+
    "\1\0\1\101\1\0\21\102\34\0\1\104\7\0\2\104"+
    "\6\0\1\116\4\0\21\117\13\0\1\67\40\0\1\67"+
    "\20\0\1\104\7\0\2\120\6\0\1\116\4\0\17\121"+
    "\1\122\1\121\2\0\1\55\2\110\6\55\1\56\4\55"+
    "\21\56\1\123\1\55\1\0\2\111\34\0\1\124\12\0"+
    "\1\74\40\0\1\77\27\0\2\125\2\0\5\125\1\114"+
    "\1\126\26\125\11\0\1\127\1\130\3\0\21\131\3\0"+
    "\2\132\3\0\1\133\2\0\1\116\30\0\2\132\3\0"+
    "\1\133\2\0\1\134\4\0\21\135\3\0\2\120\6\0"+
    "\1\116\4\0\17\117\1\136\1\117\3\0\2\137\3\0"+
    "\1\133\2\0\1\134\4\0\17\140\1\141\1\140\3\0"+
    "\2\137\3\0\1\133\2\0\1\134\4\0\14\140\1\142"+
    "\2\140\1\141\1\140\2\0\1\55\2\123\6\55\1\56"+
    "\4\55\3\56\1\143\15\56\2\55\1\0\2\124\16\0"+
    "\1\144\30\0\1\145\40\0\1\127\1\130\3\0\21\146"+
    "\14\0\1\130\3\0\21\131\3\0\2\132\3\0\1\133"+
    "\33\0\2\133\12\0\1\147\24\0\2\132\3\0\1\133"+
    "\2\0\1\134\4\0\21\150\3\0\2\132\3\0\1\133"+
    "\7\0\21\135\3\0\2\132\3\0\1\133\2\0\1\134"+
    "\4\0\14\135\1\151\4\135\3\0\2\137\3\0\1\133"+
    "\26\0\1\103\4\0\2\137\3\0\1\133\7\0\17\140"+
    "\1\141\1\140\3\0\2\137\3\0\1\133\7\0\14\140"+
    "\1\142\2\140\1\141\1\140\3\0\2\152\3\0\1\133"+
    "\2\0\1\116\4\0\17\121\1\122\1\121\2\0\1\55"+
    "\2\56\3\55\1\72\2\55\1\56\4\55\14\56\1\153"+
    "\4\56\2\55\32\0\1\154\17\0\1\145\1\130\37\0"+
    "\1\127\30\0\2\147\34\0\1\155\12\0\1\134\30\0"+
    "\2\151\3\0\1\133\2\0\1\116\4\0\21\117\3\0"+
    "\2\152\3\0\1\133\2\0\1\116\4\0\17\117\1\136"+
    "\1\117\2\0\1\55\2\56\3\55\1\72\2\55\1\56"+
    "\4\55\13\56\1\156\5\56\2\55\31\0\1\157\10\0"+
    "\2\155\16\0\1\160\17\0\1\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\16\56\1\161\2\56\2\55\34\0"+
    "\1\162\36\0\1\163\6\0\1\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\14\56\1\164\4\56\2\55\32\0"+
    "\1\165\37\0\1\166\7\0\1\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\12\56\1\167\6\56\2\55\30\0"+
    "\1\170\44\0\1\171\4\0\1\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\5\56\1\172\13\56\2\55\23\0"+
    "\1\173\47\0\1\174\6\0\1\55\2\56\3\55\1\72"+
    "\1\175\1\55\1\56\4\55\21\56\2\55\7\0\1\176"+
    "\61\0\1\177\10\0\11\55\1\56\4\55\12\56\1\200"+
    "\6\56\2\55\30\0\1\201\33\0\1\202\15\0\1\55"+
    "\2\56\3\55\1\72\2\55\1\56\4\55\14\56\1\203"+
    "\4\56\2\55\32\0\1\204\15\0\1\205\31\0\1\55"+
    "\2\56\3\55\1\72\2\55\1\56\4\55\7\56\1\206"+
    "\11\56\2\55\25\0\1\207\43\0\1\210\10\0\1\55"+
    "\2\56\2\55\1\211\1\72\2\55\1\56\4\55\21\56"+
    "\2\55\5\0\1\212\65\0\1\213\6\0\4\55\1\214"+
    "\4\55\1\56\4\55\21\56\2\55\4\0\1\215\61\0"+
    "\1\216\13\0\11\55\1\56\4\55\21\217\2\55\16\0"+
    "\21\220\7\0\1\221\33\0\1\55\2\56\1\55\1\222"+
    "\1\55\1\72\2\55\1\223\4\55\21\224\2\55\4\0"+
    "\1\225\4\0\1\226\4\0\21\227\6\0\1\230\34\0"+
    "\6\55\1\231\2\55\1\56\4\55\21\56\3\55\2\56"+
    "\1\55\1\222\1\55\1\72\2\55\1\223\4\55\21\232"+
    "\3\55\2\56\1\55\1\222\1\55\1\72\2\55\1\56"+
    "\4\55\21\224\2\55\6\0\1\233\36\0\1\225\4\0"+
    "\1\226\4\0\21\234\6\0\1\225\11\0\21\227\20\0"+
    "\21\235\2\0\1\55\2\231\6\55\1\56\4\55\21\56"+
    "\1\55\1\236\1\55\2\56\3\55\1\72\2\55\1\223"+
    "\4\55\21\56\2\55\1\0\2\233\35\0\1\237\11\0"+
    "\1\226\33\0\1\240\4\0\1\241\4\0\21\242\2\0"+
    "\1\55\2\236\6\55\1\56\4\55\5\56\1\243\13\56"+
    "\2\55\6\0\1\244\36\0\1\240\4\0\1\241\4\0"+
    "\21\245\6\0\1\240\11\0\21\242\2\0\1\55\2\56"+
    "\3\55\1\72\2\55\1\56\4\55\12\56\1\246\6\56"+
    "\2\55\1\0\2\244\35\0\1\247\11\0\1\241\27\0"+
    "\1\55\2\56\3\55\1\72\2\55\1\56\4\55\16\56"+
    "\1\250\2\56\3\55\2\56\3\55\1\72\2\55\1\56"+
    "\4\55\5\56\1\251\13\56\3\55\2\251\3\55\1\72"+
    "\2\55\1\56\3\55\1\252\21\56\3\55\2\252\6\55"+
    "\1\56\4\55\21\56\1\253\2\55\2\253\6\55\1\56"+
    "\4\55\3\56\1\254\15\56\3\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\14\56\1\255\4\56\3\55\2\56"+
    "\3\55\1\72\2\55\1\56\4\55\13\56\1\256\5\56"+
    "\3\55\2\56\3\55\1\72\2\55\1\56\4\55\16\56"+
    "\1\257\2\56\3\55\2\56\3\55\1\72\2\55\1\56"+
    "\4\55\14\56\1\260\4\56\3\55\2\56\3\55\1\72"+
    "\2\55\1\56\4\55\12\56\1\261\6\56\3\55\2\56"+
    "\3\55\1\72\2\55\1\56\4\55\5\56\1\262\13\56"+
    "\3\55\2\56\3\55\1\72\1\263\1\55\1\56\4\55"+
    "\21\56\13\55\1\56\4\55\12\56\1\264\6\56\3\55"+
    "\2\56\3\55\1\72\2\55\1\56\4\55\14\56\1\265"+
    "\4\56\3\55\2\56\3\55\1\72\2\55\1\56\4\55"+
    "\7\56\1\266\11\56\3\55\2\56\2\55\1\267\1\72"+
    "\2\55\1\56\4\55\21\56\6\55\1\270\4\55\1\56"+
    "\4\55\21\56\13\55\1\56\4\55\21\271\3\55\2\56"+
    "\1\55\1\272\1\55\1\72\2\55\1\273\4\55\21\274"+
    "\10\55\1\275\2\55\1\56\4\55\21\56\3\55\2\56"+
    "\1\55\1\272\1\55\1\72\2\55\1\273\4\55\21\276"+
    "\3\55\2\56\1\55\1\272\1\55\1\72\2\55\1\56"+
    "\4\55\21\274\3\55\2\275\6\55\1\56\4\55\21\56"+
    "\1\55\1\277\1\55\2\56\3\55\1\72\2\55\1\273"+
    "\4\55\21\56\2\55";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6072];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\24\0\1\11\37\0\1\11\25\0"+
    "\1\1\1\0\1\11\106\0\1\11\7\0\1\11\27\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SemanticLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public SemanticToken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return null;
            }
          // fall through
          case 9: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 10: break;
          case 3:
            { String lexeme = yytext();
          String name = lexeme.split(" ")[0];
          String token = name + "()";
          return new SemanticToken(lexeme, SemanticToken.Semantic.FUNCTION_CALL);
            }
          // fall through
          case 11: break;
          case 4:
            { String lexeme = yytext();
          String name = lexeme.split(" ")[2];
          return new SemanticToken("let \t" + name, SemanticToken.Semantic.DECLARATION);
            }
          // fall through
          case 12: break;
          case 5:
            { String lexeme = yytext();
            String name = lexeme.split(" ")[2];
            String value = lexeme.split(" ")[4];
            return new SemanticToken("let \t" + name + " = " + value, SemanticToken.Semantic.DECLARATION_ASIGN);
            }
          // fall through
          case 13: break;
          case 6:
            { String lexeme = yytext();

          String token = lexeme
            .replace("int", "")
            .replace("float", "")
            .replace("char", "")
            .replace("boolean", "")
            .replace("void", "")
            .replace("<", "function ");

          return new SemanticToken(token, SemanticToken.Semantic.FUNCTION);
            }
          // fall through
          case 14: break;
          case 7:
            { String lexeme = yytext();
          String out = "";
          Pattern pattern = Pattern.compile("\\{\\s*(.*?)\\s*\\}", Pattern.DOTALL);
          Matcher matcher = pattern.matcher(lexeme);
          while (matcher.find()) {
              out = matcher.group(1);
          }
          String first = lexeme.split(" ")[1].replace("(", "");
          String second = lexeme.split(" ")[3].replace(")", "");

          String token = "for(let \t" + first + "=0; " + first + " <" + second + ";" + first + "++){" + out + "}";
          return new SemanticToken(token, SemanticToken.Semantic.FOR);
            }
          // fall through
          case 15: break;
          case 8:
            { String lexeme = yytext();
          String token = lexeme.replace(">", "");
          return new SemanticToken(token, SemanticToken.Semantic.IF);
            }
          // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
